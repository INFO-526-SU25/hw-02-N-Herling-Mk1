---
title: "HW 02"
author: "Nathan Herling"
date: "2025-06-13"
_due: "Friday-June-13-2025"   
format: 
  html:
    embed-resources: true
toc: true
#custom field '_due', 
#if you want to show in the document:**Due Date:** {{_due}}
---

## 0 - Setup

```{r setup, echo=FALSE}
#--------------------->
#################
# Package Setup #
#################
#Check if pacman [package manager] is installed, if not install it.
#throw [FYI] alert either way.
if (!requireNamespace("pacman", quietly = TRUE)) {
  message("Installing 'pacman' (not found locally)...")
  install.packages("pacman")
} else {
  message("[FYI]\n'pacman' already installed â€” skipping install.")
}
# use this line for installing/loading
# pacman::p_load()
# - packages to load stored in a variable (vector)
pkgs <- c(
  "tidyverse",
  "glue",
  "scales",
  "lubridate",
  "patchwork",
  "ggh4x",
  "ggrepel",
  "openintro",
  "ggridges",
  "dsbox",
  "janitor",
  "here",
  "knitr",
  "ggthemes",
  "ggplot2"
)

# - load from the character array/vector
pacman::p_load(char=pkgs)

# - install tidyverse/dsbox directly from Git Hub
# - this allows for the possible need to install on a repo. pull.
# - and, if it's already installed just thorw an alert.
if (!requireNamespace("dsbox", quietly = TRUE)) {
  message("Installing 'dsbox' from GitHub (not found locally)...")
  suppressMessages(devtools::install_github("tidyverse/dsbox"))
} else {
  message("[FYI]\n'dsbox' already installed â€” skipping GitHub install.")
}

# - alert to user packages loaded.
cat(paste(
  "The packages loaded:",
  paste("-", pkgs, collapse = "\n"),
  sep = "\n"
))

#-------------------------->
######################
# Basic set Theme up #
######################
# ---- set theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))

# set width of code output
options(width = 65)

# set figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 7,        # 7" width
  fig.asp = 0.618,      # the golden ratio
  fig.retina = 3,       # dpi multiplier for displaying HTML output on retina
  fig.align = "center", # center align figures
  dpi = 300             # higher dpi, sharper image
)
## ---- end theme set up
```
## 1 - A new day, a new plot, a new geom

> **Question #1**
> <div style="background-color:#e0e0e0; padding:10px; border-radius:5px; border:1px solid #16DB65; overflow-wrap:anywhere; word-break:break-word; white-space:normal;">
> A new day, a new plot, a new geom. The goal of this exercise is to learn about a new type of plot (ridgeline plot) and to learn how to make it. Use the 
> ```geom_density_ridges()``` function from the ```ggridges``` package to make a ridge plot of Airbnb review scores of Edinburgh neighborhoods. The neighborhoods should be ordered by their median review scores. The data can be found in the ```dsbox``` package, and itâ€™s called ```edibnb```. Also include an interpretation for your visualization. You should review feedback from your Homework 1 to make sure you capture anything you may have missed previously.
> </div>


```{r}
#| label: label-me-1
#| echo: false

# =======================================
# Diagnostics Summary Table Preparation
# =======================================

# Data Type
data_type <- class(edibnb$review_scores_rating)

# Summary Stats
summary_stats <- summary(edibnb$review_scores_rating)

# Missing values
missing_count <- sum(is.na(edibnb$review_scores_rating))

# IQR and Outlier Detection
q1 <- quantile(edibnb$review_scores_rating, 0.25, na.rm = TRUE)
q3 <- quantile(edibnb$review_scores_rating, 0.75, na.rm = TRUE)
iqr <- q3 - q1
lower_bound <- q1 - 1.5 * iqr
upper_bound <- q3 + 1.5 * iqr

outliers <- edibnb$review_scores_rating[!is.na(edibnb$review_scores_rating) &
                                          (edibnb$review_scores_rating < lower_bound |
                                           edibnb$review_scores_rating > upper_bound)]

# Construct a table of key diagnostics
diagnostics_table <- tibble::tibble(
  Metric = c(
    "Data Type",
    "Min", "1st Quartile", "Median", "Mean", "3rd Quartile", "Max",
    "Missing Values",
    "IQR", "Lower Outlier Bound", "Upper Outlier Bound", "Outlier Count"
  ),
  Value = c(
    data_type,
    summary_stats[["Min."]],
    summary_stats[["1st Qu."]],
    summary_stats[["Median"]],
    summary_stats[["Mean"]],
    summary_stats[["3rd Qu."]],
    summary_stats[["Max."]],
    missing_count,
    iqr,
    lower_bound,
    upper_bound,
    length(outliers)
  )
)

# Print the diagnostics table with styled caption (for HTML)
knitr::kable(
  diagnostics_table,
  caption = "<span style='font-weight:bold; font-size:1.2em;'>Table 1. Diagnostic Summary for <code>review_scores_rating</code> (edibnb data set)</span>"
)

# =======================================
# Visualization: Ridge Plot by Neighborhood
# =======================================

# Filter out rows with NA in neighbourhood or review_scores_rating
edibnb_clean <- edibnb |>
  filter(!is.na(neighbourhood), !is.na(review_scores_rating))

# Calculate median review scores by neighborhood
median_scores <- edibnb_clean |>
  group_by(neighbourhood) |>
  summarize(median_score = median(review_scores_rating, na.rm = TRUE)) |>
  arrange(median_score)

# Reorder neighborhoods by median score
edibnb_clean <- edibnb_clean |>
  mutate(neighbourhood = factor(neighbourhood, levels = median_scores$neighbourhood))

# ==== New: Calculate mean review scores for each neighborhood (for annotation) ====
mean_scores <- edibnb_clean |>
  group_by(neighbourhood) |>
  summarize(mean_score = mean(review_scores_rating, na.rm = TRUE))

# ==== Modified plot: add geom_text for mean scores offset to the right ====
# Create a named vector of colors for neighborhoods
neighborhood_colors <- setNames(viridis::viridis(length(levels(edibnb_clean$neighbourhood))), levels(edibnb_clean$neighbourhood))

# Get the first and last neighborhood (lowest & highest median)
low_neigh <- levels(edibnb_clean$neighbourhood)[1]
high_neigh <- levels(edibnb_clean$neighbourhood)[length(levels(edibnb_clean$neighbourhood))]

# Maximum x-position for annotation
max_annot_x <- max(mean_scores$mean_score, na.rm = TRUE) + 25


g1 <- ggplot(edibnb_clean, aes(x = review_scores_rating, y = neighbourhood)) +
  geom_density_ridges(
    aes(color = neighbourhood),
    fill = "cornsilk4",
    alpha = 0.7,
    scale = 1.2,
    show.legend = FALSE    # ðŸ”§ Hide neighborhood legend entries only here
  ) +
  geom_point(
    data = mean_scores,
    aes(x = mean_score, y = neighbourhood, color = "Mean Score"),
    size = 3,
    shape = 18
  ) +
  geom_segment(
    data = mean_scores,
    aes(
      x = mean_score, 
      xend = mean_score + 20,
      y = neighbourhood,
      yend = as.numeric(neighbourhood) + 0.5
    ),
    color = "black",
    linewidth = 0.3
  ) +
  ggrepel::geom_text_repel(
    data = mean_scores,
    aes(
      x = mean_score + 20,
      y = as.numeric(neighbourhood) + 0.5,
      label = round(mean_score, 1)
    ),
    hjust = 0,
    size = 3.2,
    color = "black",
    nudge_y = 0.15,
    segment.color = NA,
    direction = "y",
    box.padding = 0.3,
    point.padding = 0.5,
    show.legend = FALSE
  ) +

# ðŸ”§ NEW: Annotations for Low and High Median neighborhoods
# Add annotations for low and high median
  annotate("text",
           x = max_annot_x,
           y = 1.5,
           label = "Low",
           hjust = -1,
           size = 5,
           color = neighborhood_colors[[low_neigh]]) +
  annotate("text",
           x = max_annot_x,
           y = length(levels(edibnb_clean$neighbourhood))+0.5,
           label = "High",
           hjust = -1,
           size = 5,
           color = neighborhood_colors[[high_neigh]]) +

  scale_x_continuous(name = "Review Scores Rating", limits = c(0, 150)) +
  scale_color_manual(
    name = "Legend",
    values = c(neighborhood_colors, "Mean Score" = "black"),
    breaks = "Mean Score",
    labels = "Mean Score"
  ) +
  labs(
    title = "Distribution of Airbnb Review Scores by Edinburgh Neighborhood",
    y = "Neighborhood"
  ) +
  theme_ridges() +
  theme(
    legend.position = "right",
    legend.title = element_text(hjust=0.6)
  )

g1

```

## 2 - Foreign Connected PACs
<div style="background-color:#f0f0f0; padding:10px; border-radius:5px; border:1px solid #87CEEB;">
<b>Question #2</b><br>
<div style="background-color:#e0e0e0; padding:10px; border-radius:5px; border:1px solid #16DB65; display:flex; align-items:center; justify-content:center; height:60px;">
  <strong><br>Put the question here</strong>
</div>
</div>
```{r}
#| label: label-me-2
#| echo: false
#| fig-width: 10


# Suppress readr column type messages
options(readr.show_col_types = FALSE) 
# Load and combine data
list_of_files <- fs::dir_ls(path = "data", regexp = "Foreign Connected PAC")

pac <- read_csv(list_of_files, id = "year") |> 
  clean_names() |>
  mutate(year = str_extract(year, "\\d{4}(?=\\.csv$)") |> as.integer()) |>
  separate(country_of_origin_parent_company,
           into = c("country", "parent_company"),
           sep = "/", 
           fill = "right", 
           extra = "merge") |>
  mutate(across(c(dems, repubs), ~ as.numeric(str_replace_all(., "[\\$,]", "")))) |>
  select(year, pac_name_affiliate, country, parent_company, dems, repubs)

# Summarize totals by year for UK only
yearly_totals <- pac |>
  filter(country == "UK") |>
  pivot_longer(cols = c(dems, repubs), names_to = "party", values_to = "amount") |>
  filter(!is.na(amount)) |>
  group_by(year, party) |>
  summarise(amount = sum(amount), .groups = "drop")

# Plot
g2a <- ggplot(yearly_totals, aes(x = year, y = amount, color = party)) +
  geom_line(linewidth = 1.2) +     # Keep line only
  # geom_point(size = 2)      # Removed points
  
  # Removed geom_text() for labels (still commented out)
  # geom_text(aes(label = scales::dollar(amount, scale = 1e-6, suffix = "M")), 
  #           vjust = -0.5, size = 3.5, show.legend = FALSE) +
  
  scale_y_continuous(
    name = "Total amount",
    labels = label_dollar(scale = 1e-6, suffix = "M")
  ) +
  
  scale_x_continuous(
    name = "Year",
    breaks = scales::pretty_breaks()
  ) +
  
  scale_color_manual(
    values = c("dems" = "blue", "repubs" = "red"),
    labels = c("Democrats", "Republicans"),
    name = "Party"                          # - sets name on legend
  ) +
  
  labs(title = "Contributions to US political parties from UK-connected PACs") +
  
  theme(
    legend.position = c(0.9, 0.15),            # - getting a warning but if I do as requested, 
    axis.title.x = element_text(hjust = 0),    # - legend moves outside plot.
    axis.title.y = element_text(hjust = 0)
  )

print(g2a)

```

## 3 - Median housing prices in the US
<div style="background-color:#f0f0f0; padding:10px; border-radius:5px; border:1px solid #87CEEB;">
<b>Question #3</b><br>
<div style="background-color:#e0e0e0; padding:10px; border-radius:5px; border:1px solid #16DB65; display:flex; align-items:center; justify-content:center; height:60px;">
  <strong><br>Put the question here</strong>
</div>
</div>
```{r}
#| label: label-me-3
#| echo: false

```


## 4 - Expect More. Plot More.
<div style="background-color:#f0f0f0; padding:10px; border-radius:5px; border:1px solid #87CEEB;">
<b>Question #4</b><br>
<div style="background-color:#e0e0e0; padding:10px; border-radius:5px; border:1px solid #16DB65; display:flex; align-items:center; justify-content:center; height:60px;">
  <strong><br>Recreate the Target LOGO</strong>
</div>
</div>
```{r}
#| label: label-me-4
#| echo: false

library(ggplot2)
library(ggforce)  # for geom_circle()

# Define circles for the Target logo
circles <- data.frame(
  x0 = 0, y0 = 0,
  r = c(1, 0.7),
  fill = c("red", "white")
)

# Plot the logo + "TARGET" + Â®
g1 <- ggplot() +
  # Draw the rings
  geom_circle(data = circles, aes(x0 = x0, y0 = y0, r = r, fill = fill), color = NA) + 
  # Solid center circle
  geom_point(aes(x = 0, y = 0), shape = 21, size = 30, fill = "red") +  
  # Add the word 'TARGET' below the logo
  annotate("text", x = 0, y = -1.4, label = "TARGET", color = "red", size = 10, fontface = "bold") +
  # Add the Â® symbol offset to the bottom right of 'TARGET'
  annotate("text", x = 0.60, y = -1.50, label = "Â®", color = "red", size = 8) +
  # Style the plot
  scale_fill_identity() +
  coord_fixed() +
  theme_void()

plot(g1)


```
## 5 - Mirror, mirror on the wall, whoâ€™s the ugliest of them all?
<div style="background-color:#f0f0f0; padding:10px; border-radius:5px; border:1px solid #87CEEB;">
<b>Question #5</b><br>
<div style="background-color:#e0e0e0; padding:10px; border-radius:5px; border:1px solid #16DB65; display:flex; align-items:center; justify-content:center; height:60px;">
  <strong><br>Put the question here</strong>
</div>
</div>
```{r}
#| label: label-me-5
#| echo: false

```
